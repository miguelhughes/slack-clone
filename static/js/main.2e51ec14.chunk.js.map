{"version":3,"sources":["Sidebar.js","Message.js","Conversation.js","seed-data.js","App.js","serviceWorker.js","index.js"],"names":["ChannelGroup","name","channels","onClick","activeChannelName","className","map","c","key","Sidebar","filter","type","Avatar","Text","text","Author","author","Time","time","toLocaleString","Message","message","timeStamp","MessageInput","onAddedMessage","inputRef","useRef","onSubmit","event","preventDefault","newText","current","value","ref","placeholder","Conversation","active","conversation","useState","participants","messages","spreadSeconds","Math","random","lastMessageStamp","length","seconds","round","stamp","Date","now","id","unshift","generateInitialMessages","setMessages","useEffect","elementQuery","element","document","querySelector","scrollTop","scrollHeight","scrollBottom","m","addedText","prevMessages","App","initialConversations","conversations","activeConversation","setActiveConversation","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.2e51ec14.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Sidebar.css\";\n\nconst Sidebar = ({ channels, onClick, activeChannelName }) => {\n  return (\n    <div className=\"sidebar\">\n      <ChannelGroup\n        name=\"Channels\"\n        channels={channels.filter((c) => c.type === \"channel\")}\n        onClick={onClick}\n        activeChannelName={activeChannelName}\n      />\n      <ChannelGroup\n        name=\"people\"\n        channels={channels.filter((c) => c.type === \"dm\")}\n        onClick={onClick}\n        activeChannelName={activeChannelName}\n      />\n    </div>\n  );\n};\nSidebar.propTypes = {\n  channels: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired,\n  activeChannelName: PropTypes.string,\n};\nconst ChannelGroup = ({ name, channels, onClick, activeChannelName }) => {\n  return (\n    <div className=\"channel-group\">\n      <span>{name}</span>\n      <ul>\n        {channels.map((c) => (\n          <li\n            key={c.name}\n            onClick={() => onClick(c)}\n            className={c.name === activeChannelName ? \"selected\" : \"\"}\n          >\n            {c.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\nChannelGroup.propTypes = {\n  channels: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  activeChannelName: PropTypes.string.isRequired,\n};\n\nexport default Sidebar;\n","import React from \"react\";\nimport \"./Message.css\";\n// import moment from \"moment\";\nimport PropTypes from \"prop-types\";\n\nfunction Message({ message }) {\n  return (\n    <div className=\"message\">\n      <Avatar />\n      <div className=\"content\">\n        <Author author={message.author} /> <Time time={message.timeStamp} />\n        <Text text={message.text} />\n      </div>\n    </div>\n  );\n}\nMessage.propTypes = {\n  message: PropTypes.shape({\n    author: PropTypes.string.isRequired,\n    timeStamp: PropTypes.instanceOf(Date).isRequired,\n    text: PropTypes.string.isRequired,\n  }).isRequired,\n};\nfunction Avatar() {\n  return <div className=\"avatar\" />;\n}\n\nfunction Text({ text }) {\n  return <div className=\"text\">{text}</div>;\n}\nText.propTypes = {\n  text: PropTypes.string,\n};\nfunction Author({ author }) {\n  return (\n    <span className=\"author\">\n      <span className=\"name\">{author}</span>\n    </span>\n  );\n}\nAuthor.propTypes = {\n  author: PropTypes.string.isRequired,\n};\nconst Time = ({ time }) => {\n  return <span className=\"time\">{time.toLocaleString()}</span>;\n};\nTime.propTypes = {\n  time: PropTypes.instanceOf(Date).isRequired,\n};\n\nexport default Message;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Message from \"./Message\";\nimport \"./Conversation.css\";\nconst currentUser = \"Myself\";\n\nfunction generateInitialMessages(conversation) {\n  let participants;\n  if (conversation.type === \"channel\")\n    participants = [\"Dave\", \"Sarah\", \"Zack\", \"Pam\", \"Erin\", \"Joe\"];\n  else participants = [conversation.name, currentUser];\n\n  let messages = [];\n  const count = 15;\n  const spreadSeconds = Math.random() * 120;\n  let lastMessageStamp = 0;\n  while (messages.length < count) {\n    let seconds = Math.random() * spreadSeconds;\n    lastMessageStamp += Math.round(seconds);\n    const authorIndex = Math.round(Math.random() * (participants.length - 1));\n    const author = participants[authorIndex];\n    const stamp = Date.now() - lastMessageStamp * 1000;\n\n    const message = {\n      author: author,\n      timeStamp: new Date(stamp),\n      text: \"A message from \" + author,\n      id: messages.length,\n    };\n    messages.unshift(message);\n  }\n\n  return messages;\n}\nfunction scrollBottom(elementQuery) {\n  const element = document.querySelector(elementQuery);\n  element.scrollTop = element.scrollHeight;\n}\nconst Conversation = ({ active, conversation }) => {\n  const [messages, setMessages] = useState(\n    generateInitialMessages(conversation)\n  );\n  useEffect(() => {\n    if (active) scrollBottom(\".messages\");\n  }, [messages, active]);\n\n  const handleAddedMessage = (addedText) => {\n    setMessages((prevMessages) => {\n      return [\n        ...prevMessages,\n        {\n          author: currentUser,\n          text: addedText,\n          timeStamp: new Date(),\n          id: prevMessages.length,\n        },\n      ];\n    });\n  };\n\n  if (!active) {\n    return null;\n  } else {\n    return (\n      <div className=\"main\">\n        <div className=\"messages\">\n          {messages.map((m) => (\n            <Message key={m.id} message={m} />\n          ))}\n        </div>\n        <MessageInput onAddedMessage={handleAddedMessage} />\n      </div>\n    );\n  }\n};\nconst MessageInput = ({ onAddedMessage }) => {\n  const inputRef = useRef(\"\");\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const newText = inputRef.current.value;\n    inputRef.current.value = \"\";\n    onAddedMessage(newText);\n  };\n  return (\n    <div className=\"message-input\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          ref={inputRef}\n          placeholder=\"Type your message here. Press Enter to send.\"\n        />\n      </form>\n    </div>\n  );\n};\nMessageInput.propTypes = {\n  onAddedMessage: PropTypes.func.isRequired,\n};\nexport default Conversation;\n","let channels = [\n  {\n    name: \"# general\",\n    type: \"channel\",\n  },\n  {\n    name: \"# help\",\n    type: \"channel\",\n  },\n  {\n    name: \"# react\",\n    type: \"channel\",\n  },\n  {\n    name: \"# redux\",\n    type: \"channel\",\n  },\n  {\n    name: \"# webpack\",\n    type: \"channel\",\n  },\n  {\n    name: \"# react-router\",\n    type: \"channel\",\n  },\n  {\n    name: \"Dave\",\n    type: \"dm\",\n  },\n  {\n    name: \"Sarah\",\n    type: \"dm\",\n  },\n  {\n    name: \"Zack\",\n    type: \"dm\",\n  },\n  {\n    name: \"Pam\",\n    type: \"dm\",\n  },\n  {\n    name: \"Erin\",\n    type: \"dm\",\n  },\n  {\n    name: \"Joe\",\n    type: \"dm\",\n  },\n];\n\nexport default channels;\n","import React, { useState } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport Conversation from \"./Conversation\";\nimport \"./App.css\";\nimport initialConversations from \"./seed-data\";\nfunction App() {\n  const [conversations] = useState(initialConversations);\n  const [activeConversation, setActiveConversation] = useState(\n    conversations[0].name\n  );\n  const handleConversationClick = (conversation) => {\n    setActiveConversation(conversation.name);\n  };\n  return (\n    <div className=\"app\">\n      <Sidebar\n        channels={conversations}\n        activeChannelName={activeConversation}\n        onClick={handleConversationClick}\n      />\n      {conversations.map((c) => (\n        <Conversation\n          key={c.name}\n          active={c.name === activeConversation}\n          conversation={c}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}